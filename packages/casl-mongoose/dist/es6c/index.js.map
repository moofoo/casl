{"version":3,"file":"index.js","sources":["../../src/mongo.ts","../../src/accessible_records.ts","../../src/accessible_fields.ts"],"sourcesContent":["import { AnyMongoAbility } from '@casl/ability';\nimport { rulesToQuery } from '@casl/ability/extra';\n\nfunction convertToMongoQuery(rule: AnyMongoAbility['rules'][number]) {\n  const conditions = rule.conditions!;\n  return rule.inverted ? { $nor: [conditions] } : conditions;\n}\n\nexport function toMongoQuery<T extends AnyMongoAbility>(\n  ability: T,\n  subjectType: Parameters<T['rulesFor']>[1],\n  action: Parameters<T['rulesFor']>[0] = 'read'\n) {\n  return rulesToQuery(ability, action, subjectType, convertToMongoQuery);\n}\n","import { Normalize, AnyMongoAbility, Generics, ForbiddenError, getDefaultErrorMessage } from '@casl/ability';\nimport type { Schema, QueryWithHelpers, Model, Document } from 'mongoose';\nimport mongoose from 'mongoose';\nimport { toMongoQuery } from './mongo';\n\nfunction failedQuery(\n  ability: AnyMongoAbility,\n  action: string,\n  modelName: string,\n  query: QueryWithHelpers<Document, Document>\n) {\n  query.where({ __forbiddenByCasl__: 1 }); // eslint-disable-line\n  const anyQuery: any = query;\n\n  if (typeof anyQuery.pre === 'function') {\n    anyQuery.pre((cb: (error?: Error) => void) => {\n      const error = ForbiddenError.from(ability);\n      error.action = action;\n      error.subjectType = modelName;\n      error.setMessage(getDefaultErrorMessage(error));\n      cb(error);\n    });\n  }\n\n  return query;\n}\n\nfunction accessibleBy<T extends AnyMongoAbility>(\n  this: any,\n  ability: T,\n  action?: Normalize<Generics<T>['abilities']>[0]\n): QueryWithHelpers<Document, Document> {\n  let modelName: string | undefined = this.modelName;\n\n  if (!modelName) {\n    modelName = 'model' in this ? this.model.modelName : null;\n  }\n\n  if (!modelName) {\n    throw new TypeError('Cannot detect model name to return accessible records');\n  }\n\n  const query = toMongoQuery(ability, modelName, action);\n\n  if (query === null) {\n    return failedQuery(ability, action || 'read', modelName, this.where());\n  }\n\n  return this instanceof mongoose.Query ? this.and([query]) : this.where({ $and: [query] });\n}\n\ntype GetAccessibleRecords<T extends Document> = <U extends AnyMongoAbility>(\n  ability: U,\n  action?: Normalize<Generics<U>['abilities']>[0]\n) => QueryWithHelpers<T, T, QueryHelpers<T>>;\n\ntype QueryHelpers<T extends Document> = {\n  accessibleBy: GetAccessibleRecords<T>\n};\nexport interface AccessibleRecordModel<\n  T extends Document, K = unknown\n> extends Model<T, K & QueryHelpers<T>> {\n  accessibleBy: GetAccessibleRecords<T>\n}\n\nexport function accessibleRecordsPlugin(schema: Schema<any>) {\n  schema.query.accessibleBy = accessibleBy;\n  schema.statics.accessibleBy = accessibleBy;\n}\n","import { wrapArray, Normalize, AnyMongoAbility, Generics } from '@casl/ability';\nimport { permittedFieldsOf, PermittedFieldsOptions } from '@casl/ability/extra';\nimport type { Schema, Model, Document } from 'mongoose';\n\nexport type AccessibleFieldsOptions =\n  {\n    getFields(schema: Schema<Document>): string[]\n  } &\n  ({ only: string | string[] } | { except: string | string[] });\n\nexport const getSchemaPaths: AccessibleFieldsOptions['getFields'] = schema => Object.keys((schema as { paths: object }).paths);\n\nfunction fieldsOf(schema: Schema<Document>, options: Partial<AccessibleFieldsOptions>) {\n  const fields = options.getFields!(schema);\n\n  if (!options || !('except' in options)) {\n    return fields;\n  }\n\n  const excludedFields = wrapArray(options.except);\n  return fields.filter(field => excludedFields.indexOf(field) === -1);\n}\n\ntype GetAccessibleFields<T extends AccessibleFieldsDocument> = <U extends AnyMongoAbility>(\n  this: Model<T> | T,\n  ability: U,\n  action?: Normalize<Generics<U>['abilities']>[0]\n) => string[];\n\nexport interface AccessibleFieldsModel<T extends AccessibleFieldsDocument> extends Model<T> {\n  accessibleFieldsBy: GetAccessibleFields<T>\n}\n\nexport interface AccessibleFieldsDocument extends Document {\n  accessibleFieldsBy: GetAccessibleFields<AccessibleFieldsDocument>\n}\n\nfunction modelFieldsGetter() {\n  let fieldsFrom: PermittedFieldsOptions<AnyMongoAbility>['fieldsFrom'];\n  return (schema: Schema<any>, options: Partial<AccessibleFieldsOptions>) => {\n    if (!fieldsFrom) {\n      const ALL_FIELDS = options && 'only' in options\n        ? wrapArray(options.only as string[])\n        : fieldsOf(schema, options);\n      fieldsFrom = rule => rule.fields || ALL_FIELDS;\n    }\n\n    return fieldsFrom;\n  };\n}\n\nexport function accessibleFieldsPlugin(\n  schema: Schema<any>,\n  rawOptions?: Partial<AccessibleFieldsOptions>\n) {\n  const options = { getFields: getSchemaPaths, ...rawOptions };\n  const fieldsFrom = modelFieldsGetter();\n  type ModelOrDoc = Model<AccessibleFieldsDocument> | AccessibleFieldsDocument;\n\n  function accessibleFieldsBy(this: ModelOrDoc, ability: AnyMongoAbility, action?: string) {\n    const subject = typeof this === 'function' ? this.modelName : this;\n    return permittedFieldsOf(ability, action || 'read', subject, {\n      fieldsFrom: fieldsFrom(schema, options)\n    });\n  }\n\n  schema.statics.accessibleFieldsBy = accessibleFieldsBy;\n  schema.method('accessibleFieldsBy', accessibleFieldsBy);\n}\n"],"names":["convertToMongoQuery","rule","conditions","inverted","$nor","toMongoQuery","ability","subjectType","action","rulesToQuery","failedQuery","modelName","query","where","__forbiddenByCasl__","anyQuery","pre","cb","error","ForbiddenError","from","setMessage","getDefaultErrorMessage","accessibleBy","model","TypeError","mongoose","Query","and","$and","accessibleRecordsPlugin","schema","statics","getSchemaPaths","Object","keys","paths","fieldsOf","options","fields","getFields","excludedFields","wrapArray","except","filter","field","indexOf","modelFieldsGetter","fieldsFrom","ALL_FIELDS","only","accessibleFieldsPlugin","rawOptions","accessibleFieldsBy","subject","permittedFieldsOf","method"],"mappings":";;;;;;;;;;;;AAGA,SAASA,mBAAT,CAA6BC,IAA7B,EAAqE;AACnE,QAAMC,UAAU,GAAGD,IAAI,CAACC,UAAxB;AACA,SAAOD,IAAI,CAACE,QAAL,GAAgB;AAAEC,IAAAA,IAAI,EAAE,CAACF,UAAD;AAAR,GAAhB,GAAyCA,UAAhD;AACD;;AAEM,SAASG,YAAT,CACLC,OADK,EAELC,WAFK,EAGLC,MAAoC,GAAG,MAHlC,EAIL;AACA,SAAOC,kBAAY,CAACH,OAAD,EAAUE,MAAV,EAAkBD,WAAlB,EAA+BP,mBAA/B,CAAnB;AACD;;ACTD,SAASU,WAAT,CACEJ,SADF,EAEEE,MAFF,EAGEG,SAHF,EAIEC,KAJF,EAKE;AACAA,EAAAA,KAAK,CAACC,KAAN,CAAY;AAAEC,IAAAA,mBAAmB,EAAE;AAAvB,GAAZ,EADA;;AAEA,QAAMC,QAAa,GAAGH,KAAtB;;AAEA,MAAI,OAAOG,QAAQ,CAACC,GAAhB,KAAwB,UAA5B,EAAwC;AACtCD,IAAAA,QAAQ,CAACC,GAAT,CAAcC,EAAD,IAAiC;AAC5C,YAAMC,KAAK,GAAGC,sBAAc,CAACC,IAAf,CAAoBd,SAApB,CAAd;AACAY,MAAAA,KAAK,CAACV,MAAN,GAAeA,MAAf;AACAU,MAAAA,KAAK,CAACX,WAAN,GAAoBI,SAApB;AACAO,MAAAA,KAAK,CAACG,UAAN,CAAiBC,8BAAsB,CAACJ,KAAD,CAAvC;AACAD,MAAAA,EAAE,CAACC,KAAD,CAAF;AACD,KAND;AAOD;;AAED,SAAON,KAAP;AACD;;AAED,SAASW,YAAT,CAEEjB,OAFF,EAGEE,MAHF,EAIwC;AACtC,MAAIG,SAA6B,GAAG,KAAKA,SAAzC;;AAEA,MAAI,CAACA,SAAL,EAAgB;AACdA,IAAAA,SAAS,GAAG,WAAW,IAAX,GAAkB,KAAKa,KAAL,CAAWb,SAA7B,GAAyC,IAArD;AACD;;AAED,MAAI,CAACA,SAAL,EAAgB;AACd,UAAM,IAAIc,SAAJ,CAAc,uDAAd,CAAN;AACD;;AAED,QAAMb,KAAK,GAAGP,YAAY,CAACC,OAAD,EAAUK,SAAV,EAAqBH,MAArB,CAA1B;;AAEA,MAAII,KAAK,KAAK,IAAd,EAAoB;AAClB,WAAOF,WAAW,CAACJ,OAAD,EAAUE,MAAM,IAAI,MAApB,EAA4BG,SAA5B,EAAuC,KAAKE,KAAL,EAAvC,CAAlB;AACD;;AAED,SAAO,gBAAgBa,4BAAQ,CAACC,KAAzB,GAAiC,KAAKC,GAAL,CAAS,CAAChB,KAAD,CAAT,CAAjC,GAAqD,KAAKC,KAAL,CAAW;AAAEgB,IAAAA,IAAI,EAAE,CAACjB,KAAD;AAAR,GAAX,CAA5D;AACD;;AAgBM,SAASkB,uBAAT,CAAiCC,MAAjC,EAAsD;AAC3DA,EAAAA,MAAM,CAACnB,KAAP,CAAaW,YAAb,GAA4BA,YAA5B;AACAQ,EAAAA,MAAM,CAACC,OAAP,CAAeT,YAAf,GAA8BA,YAA9B;AACD;;MC1DYU,cAAoD,GAAGF,MAAM,IAAIG,MAAM,CAACC,IAAP,CAAaJ,MAAD,CAA8BK,KAA1C;;AAE9E,SAASC,QAAT,CAAkBN,MAAlB,EAA4CO,OAA5C,EAAuF;AACrF,QAAMC,MAAM,GAAGD,OAAO,CAACE,SAAR,CAAmBT,MAAnB,CAAf;;AAEA,MAAI,CAACO,OAAD,IAAY,EAAE,YAAYA,OAAd,CAAhB,EAAwC;AACtC,WAAOC,MAAP;AACD;;AAED,QAAME,cAAc,GAAGC,iBAAS,CAACJ,OAAO,CAACK,MAAT,CAAhC;AACA,SAAOJ,MAAM,CAACK,MAAP,CAAcC,KAAK,IAAIJ,cAAc,CAACK,OAAf,CAAuBD,KAAvB,MAAkC,CAAC,CAA1D,CAAP;AACD;;AAgBD,SAASE,iBAAT,GAA6B;AAC3B,MAAIC,UAAJ;AACA,SAAO,CAACjB,MAAD,EAAsBO,OAAtB,KAAoE;AACzE,QAAI,CAACU,UAAL,EAAiB;AACf,YAAMC,UAAU,GAAGX,OAAO,IAAI,UAAUA,OAArB,GACfI,iBAAS,CAACJ,OAAO,CAACY,IAAT,CADM,GAEfb,QAAQ,CAACN,MAAD,EAASO,OAAT,CAFZ;;AAGAU,MAAAA,UAAU,GAAG/C,IAAI,IAAIA,IAAI,CAACsC,MAAL,IAAeU,UAApC;AACD;;AAED,WAAOD,UAAP;AACD,GATD;AAUD;;AAEM,SAASG,sBAAT,CACLpB,MADK,EAELqB,UAFK,EAGL;AACA,QAAMd,OAAO;AAAKE,IAAAA,SAAS,EAAEP;AAAhB,KAAmCmB,UAAnC,CAAb;AACA,QAAMJ,UAAU,GAAGD,iBAAiB,EAApC;;AAGA,WAASM,kBAAT,CAA8C/C,OAA9C,EAAwEE,MAAxE,EAAyF;AACvF,UAAM8C,OAAO,GAAG,OAAO,IAAP,KAAgB,UAAhB,GAA6B,KAAK3C,SAAlC,GAA8C,IAA9D;AACA,WAAO4C,uBAAiB,CAACjD,OAAD,EAAUE,MAAM,IAAI,MAApB,EAA4B8C,OAA5B,EAAqC;AAC3DN,MAAAA,UAAU,EAAEA,UAAU,CAACjB,MAAD,EAASO,OAAT;AADqC,KAArC,CAAxB;AAGD;;AAEDP,EAAAA,MAAM,CAACC,OAAP,CAAeqB,kBAAf,GAAoCA,kBAApC;AACAtB,EAAAA,MAAM,CAACyB,MAAP,CAAc,oBAAd,EAAoCH,kBAApC;AACD;;;;;;;"}