{"version":3,"file":"index.mjs","sources":["../../src/value-converter/can.ts","../../src/index.ts"],"sourcesContent":["import { signalBindings } from 'aurelia-framework';\nimport { PureAbility, AnyAbility } from '@casl/ability';\n\nconst ABILITY_CHANGED_SIGNAL = 'caslAbilityChanged';\nconst HAS_AU_SUBSCRIPTION = new WeakMap<object, boolean>();\n\nclass AbilityValueConverter<T extends AnyAbility> {\n  static inject = [PureAbility];\n\n  public readonly signals = [ABILITY_CHANGED_SIGNAL];\n  protected readonly _ability!: T;\n\n  constructor(ability: T) {\n    this._ability = ability;\n  }\n\n  can(...args: Parameters<T['can']>): boolean {\n    if (!HAS_AU_SUBSCRIPTION.has(this._ability)) {\n      this._ability.on('updated', () => signalBindings(ABILITY_CHANGED_SIGNAL));\n      HAS_AU_SUBSCRIPTION.set(this._ability, true);\n    }\n\n    return this._ability.can(...args as [any, any?, any?]);\n  }\n}\n\nexport class CanValueConverter<T extends AnyAbility> extends AbilityValueConverter<T> {\n  static $resource = {\n    name: 'can',\n    type: 'valueConverter'\n  };\n\n  toView(\n    subject: Parameters<T['can']>[1],\n    action: Parameters<T['can']>[0],\n    field?: string\n  ): boolean {\n    // eslint-disable-next-line\n    console.warn('`can` value converter is deprecated. Use `able` converter instead');\n    return (this as any).can(action, subject, field);\n  }\n}\n\nexport class AbleValueConverter<T extends AnyAbility> extends AbilityValueConverter<T> {\n  static $resource = {\n    name: 'able',\n    type: 'valueConverter'\n  };\n\n  toView(...args: Parameters<T['can']>): boolean {\n    return this.can(...args);\n  }\n}\n","import { FrameworkConfiguration } from 'aurelia-framework';\nimport { PureAbility, AnyAbility } from '@casl/ability';\nimport { CanValueConverter, AbleValueConverter } from './value-converter/can';\n\nexport { CanValueConverter, AbleValueConverter } from './value-converter/can';\n\nexport function configure(config: FrameworkConfiguration, defaultAbility?: AnyAbility) {\n  if (defaultAbility && defaultAbility instanceof PureAbility) {\n    config.container.registerInstance(PureAbility, defaultAbility);\n  }\n\n  config.globalResources([\n    CanValueConverter,\n    AbleValueConverter\n  ]);\n}\n"],"names":["ABILITY_CHANGED_SIGNAL","HAS_AU_SUBSCRIPTION","WeakMap","AbilityValueConverter","constructor","ability","signals","_ability","can","args","has","on","signalBindings","set","inject","PureAbility","CanValueConverter","toView","subject","action","field","console","warn","$resource","name","type","AbleValueConverter","configure","config","defaultAbility","container","registerInstance","globalResources"],"mappings":";;;AAGA,MAAMA,sBAAsB,GAAG,oBAA/B;AACA,MAAMC,mBAAmB,GAAG,IAAIC,OAAJ,EAA5B;;AAEA,MAAMC,qBAAN,CAAkD;AAMhDC,EAAAA,WAAW,CAACC,OAAD,EAAa;AAAA,SAHRC,OAGQ,GAHE,CAACN,sBAAD,CAGF;AACtB,SAAKO,QAAL,GAAgBF,OAAhB;AACD;;AAEDG,EAAAA,GAAG,CAAC,GAAGC,IAAJ,EAAyC;AAC1C,QAAI,CAACR,mBAAmB,CAACS,GAApB,CAAwB,KAAKH,QAA7B,CAAL,EAA6C;AAC3C,WAAKA,QAAL,CAAcI,EAAd,CAAiB,SAAjB,EAA4B,MAAMC,cAAc,CAACZ,sBAAD,CAAhD;;AACAC,MAAAA,mBAAmB,CAACY,GAApB,CAAwB,KAAKN,QAA7B,EAAuC,IAAvC;AACD;;AAED,WAAO,KAAKA,QAAL,CAAcC,GAAd,CAAkB,GAAGC,IAArB,CAAP;AACD;;AAjB+C;;AAA5CN,sBACGW,SAAS,CAACC,WAAD;AAmBX,MAAMC,iBAAN,SAAsDb,qBAAtD,CAA+E;AAMpFc,EAAAA,MAAM,CACJC,OADI,EAEJC,MAFI,EAGJC,KAHI,EAIK;AACT;AACAC,IAAAA,OAAO,CAACC,IAAR,CAAa,mEAAb;AACA,WAAQ,IAAD,CAAcd,GAAd,CAAkBW,MAAlB,EAA0BD,OAA1B,EAAmCE,KAAnC,CAAP;AACD;;AAdmF;AAAzEJ,kBACJO,YAAY;AACjBC,EAAAA,IAAI,EAAE,KADW;AAEjBC,EAAAA,IAAI,EAAE;AAFW;AAgBd,MAAMC,kBAAN,SAAuDvB,qBAAvD,CAAgF;AAMrFc,EAAAA,MAAM,CAAC,GAAGR,IAAJ,EAAyC;AAC7C,WAAO,KAAKD,GAAL,CAAS,GAAGC,IAAZ,CAAP;AACD;;AARoF;AAA1EiB,mBACJH,YAAY;AACjBC,EAAAA,IAAI,EAAE,MADW;AAEjBC,EAAAA,IAAI,EAAE;AAFW;;ACtCd,SAASE,SAAT,CAAmBC,MAAnB,EAAmDC,cAAnD,EAAgF;AACrF,MAAIA,cAAc,IAAIA,cAAc,YAAYd,WAAhD,EAA6D;AAC3Da,IAAAA,MAAM,CAACE,SAAP,CAAiBC,gBAAjB,CAAkChB,WAAlC,EAA+Cc,cAA/C;AACD;;AAEDD,EAAAA,MAAM,CAACI,eAAP,CAAuB,CACrBhB,iBADqB,EAErBU,kBAFqB,CAAvB;AAID;;;;"}