{"version":3,"file":"index.mjs","sources":["../../src/utils.ts","../../src/Rule.ts","../../src/structures/LinkedItem.ts","../../src/RuleIndex.ts","../../src/PureAbility.ts","../../src/matchers/conditions.ts","../../src/matchers/field.ts","../../src/Ability.ts","../../src/AbilityBuilder.ts","../../src/ForbiddenError.ts"],"sourcesContent":["import { AnyObject, Subject, SubjectType, SubjectClass, ForcedSubject, AliasesMap } from './types';\n\nexport function wrapArray<T>(value: T[] | T): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n\nexport function setByPath(object: AnyObject, path: string, value: unknown): void {\n  let ref = object;\n  let lastKey = path;\n\n  if (path.indexOf('.') !== -1) {\n    const keys = path.split('.');\n\n    lastKey = keys.pop()!;\n    ref = keys.reduce((res, prop) => {\n      res[prop] = res[prop] || {};\n      return res[prop] as AnyObject;\n    }, object);\n  }\n\n  ref[lastKey] = value;\n}\n\nconst TYPE_FIELD = '__caslSubjectType__';\nexport function setSubjectType<\n  T extends string,\n  U extends Record<PropertyKey, any>\n>(type: T, object: U): U & ForcedSubject<T> {\n  if (object) {\n    if (!object.hasOwnProperty(TYPE_FIELD)) {\n      Object.defineProperty(object, TYPE_FIELD, { value: type });\n    } else if (type !== object[TYPE_FIELD]) {\n      throw new Error(`Trying to cast object to subject type ${type} but previously it was casted to ${object[TYPE_FIELD]}`);\n    }\n  }\n\n  return object as U & ForcedSubject<T>;\n}\n\nexport const isSubjectType = (value: unknown): value is SubjectType => {\n  const type = typeof value;\n  return type === 'string' || type === 'function';\n};\n\nconst getSubjectClassName = (value: SubjectClass) => value.modelName || value.name;\nexport const getSubjectTypeName = (value: SubjectType) => {\n  return typeof value === 'string' ? value : getSubjectClassName(value);\n};\n\nexport function detectSubjectType(subject: Exclude<Subject, SubjectType>): string {\n  if (subject.hasOwnProperty(TYPE_FIELD)) {\n    return (subject as any)[TYPE_FIELD];\n  }\n\n  return getSubjectClassName(subject.constructor as SubjectClass);\n}\n\ntype AliasMerge = (actions: string[], action: string | string[]) => string[];\nfunction expandActions(aliasMap: AliasesMap, rawActions: string | string[], merge: AliasMerge) {\n  let actions = wrapArray(rawActions);\n  let i = 0;\n\n  while (i < actions.length) {\n    const action = actions[i++];\n\n    if (aliasMap.hasOwnProperty(action)) {\n      actions = merge(actions, aliasMap[action]);\n    }\n  }\n\n  return actions;\n}\n\nfunction findDuplicate(actions: string[], actionToFind: string | string[]) {\n  if (typeof actionToFind === 'string' && actions.indexOf(actionToFind) !== -1) {\n    return actionToFind;\n  }\n\n  for (let i = 0; i < actionToFind.length; i++) {\n    if (actions.indexOf(actionToFind[i]) !== -1) return actionToFind[i];\n  }\n\n  return null;\n}\n\nconst defaultAliasMerge: AliasMerge = (actions, action) => actions.concat(action);\nfunction validateForCycles(aliasMap: AliasesMap, reservedAction: string) {\n  if (reservedAction in aliasMap) {\n    throw new Error(`Cannot use \"${reservedAction}\" as an alias because it's reserved action.`);\n  }\n\n  const keys = Object.keys(aliasMap);\n  const mergeAliasesAndDetectCycles: AliasMerge = (actions, action) => {\n    const duplicate = findDuplicate(actions, action);\n    if (duplicate) throw new Error(`Detected cycle ${duplicate} -> ${actions.join(', ')}`);\n\n    const isUsingReservedAction = typeof action === 'string' && action === reservedAction\n      || actions.indexOf(reservedAction) !== -1\n      || Array.isArray(action) && action.indexOf(reservedAction) !== -1;\n    if (isUsingReservedAction) throw new Error(`Cannot make an alias to \"${reservedAction}\" because this is reserved action`);\n\n    return actions.concat(action);\n  };\n\n  for (let i = 0; i < keys.length; i++) {\n    expandActions(aliasMap, keys[i], mergeAliasesAndDetectCycles);\n  }\n}\n\nexport type AliasResolverOptions = { skipValidate?: boolean; anyAction?: string };\nexport function createAliasResolver(aliasMap: AliasesMap, options?: AliasResolverOptions) {\n  if (!options || options.skipValidate !== false) {\n    validateForCycles(aliasMap, options && options.anyAction || 'manage');\n  }\n\n  return (action: string | string[]) => expandActions(aliasMap, action, defaultAliasMerge);\n}\n\nfunction copyArrayTo<T>(dest: T[], target: T[], start: number) {\n  for (let i = start; i < target.length; i++) {\n    dest.push(target[i]);\n  }\n}\n\nexport function mergePrioritized<T extends { priority: number }>(\n  array?: T[],\n  anotherArray?: T[]\n): T[] {\n  if (!array || !array.length) {\n    return anotherArray || [];\n  }\n\n  if (!anotherArray || !anotherArray.length) {\n    return array || [];\n  }\n\n  let i = 0;\n  let j = 0;\n  const merged: T[] = [];\n\n  while (i < array.length && j < anotherArray.length) {\n    if (array[i].priority < anotherArray[j].priority) {\n      merged.push(array[i]);\n      i++;\n    } else {\n      merged.push(anotherArray[j]);\n      j++;\n    }\n  }\n\n  copyArrayTo(merged, array, i);\n  copyArrayTo(merged, anotherArray, j);\n\n  return merged;\n}\n\nexport function getOrDefault<K, V>(map: Map<K, V>, key: K, defaultValue: () => V) {\n  let value = map.get(key);\n\n  if (!value) {\n    value = defaultValue();\n    map.set(key, value);\n  }\n\n  return value;\n}\n\nexport const identity = <T>(x: T) => x;\n","import { wrapArray, isSubjectType } from './utils';\nimport {\n  MatchConditions,\n  MatchField,\n  Abilities,\n  ToAbilityTypes,\n  Normalize,\n  ConditionsMatcher,\n  FieldMatcher,\n} from './types';\nimport { RawRule, RawRuleFrom } from './RawRule';\n\ntype Tuple<A extends Abilities> = Normalize<ToAbilityTypes<A>>;\n\nfunction validate(rule: RawRuleFrom<Abilities, any>, options: RuleOptions<any>) {\n  if (Array.isArray(rule.fields) && !rule.fields.length) {\n    throw new Error('`rawRule.fields` cannot be an empty array. https://bit.ly/390miLa');\n  }\n\n  if (rule.fields && !options.fieldMatcher) {\n    throw new Error('You need to pass \"fieldMatcher\" option in order to restrict access by fields');\n  }\n\n  if (rule.conditions && !options.conditionsMatcher) {\n    throw new Error('You need to pass \"conditionsMatcher\" option in order to restrict access by conditions');\n  }\n}\n\nexport interface RuleOptions<Conditions> {\n  conditionsMatcher?: ConditionsMatcher<Conditions>\n  fieldMatcher?: FieldMatcher\n  resolveAction(action: string | string[]): string | string[]\n}\n\nexport class Rule<A extends Abilities, C> {\n  private _matchConditions: MatchConditions | undefined;\n  private _matchField: MatchField<string> | undefined;\n  private readonly _options!: RuleOptions<C>;\n  public readonly action!: Tuple<A>[0] | Tuple<A>[0][];\n  public readonly subject!: Tuple<A>[1] | Tuple<A>[1][];\n  public readonly inverted!: boolean;\n  public readonly conditions!: C | undefined;\n  public readonly fields!: string[] | undefined;\n  public readonly reason!: string | undefined;\n  public readonly priority!: number;\n\n  constructor(\n    rule: RawRule<ToAbilityTypes<A>, C>,\n    options: RuleOptions<C>,\n    priority: number = 0\n  ) {\n    validate(rule, options);\n\n    this.action = options.resolveAction(rule.action);\n    this.subject = rule.subject!;\n    this.inverted = !!rule.inverted;\n    this.conditions = rule.conditions;\n    this.reason = rule.reason;\n    this.fields = rule.fields ? wrapArray(rule.fields) : undefined;\n    this.priority = priority;\n    this._options = options;\n  }\n\n  private _conditionsMatcher() {\n    if (this.conditions && !this._matchConditions) {\n      this._matchConditions = this._options.conditionsMatcher!(this.conditions);\n    }\n\n    return this._matchConditions!;\n  }\n\n  get ast() {\n    const matches = this._conditionsMatcher();\n    return matches ? matches.ast : undefined;\n  }\n\n  matchesConditions(object: Normalize<A>[1] | undefined): boolean {\n    if (!this.conditions) {\n      return true;\n    }\n\n    if (!object || isSubjectType(object)) {\n      return !this.inverted;\n    }\n\n    const matches = this._conditionsMatcher();\n    return matches(object as Record<string, unknown>);\n  }\n\n  matchesField(field: string | undefined): boolean {\n    if (!this.fields) {\n      return true;\n    }\n\n    if (!field) {\n      return !this.inverted;\n    }\n\n    if (this.fields && !this._matchField) {\n      this._matchField = this._options.fieldMatcher!(this.fields);\n    }\n\n    return this._matchField!(field);\n  }\n}\n","export interface LinkedItem<T> {\n  next: LinkedItem<T> | null\n  prev: LinkedItem<T> | null\n  readonly value: T\n}\n\nexport function linkedItem<T>(value: T, prev: LinkedItem<T>['prev']) {\n  const item = { value, prev, next: null };\n\n  if (prev) {\n    prev.next = item;\n  }\n\n  return item;\n}\n\nexport function unlinkItem(item: LinkedItem<any>) {\n  if (item.next) {\n    item.next.prev = item.prev;\n  }\n\n  if (item.prev) {\n    item.prev.next = item.next;\n  }\n\n  item.next = item.prev = null; // eslint-disable-line\n}\n\nexport const cloneLinkedItem = <T extends LinkedItem<any>>(item: T): T => ({\n  value: item.value,\n  prev: item.prev,\n  next: item.next,\n} as T);\n","import { Rule, RuleOptions } from './Rule';\nimport { RawRuleFrom } from './RawRule';\nimport {\n  Abilities,\n  Normalize,\n  SubjectType,\n  AbilityParameters,\n  AbilityTuple,\n  ExtractSubjectType\n} from './types';\nimport { wrapArray, detectSubjectType, mergePrioritized, getOrDefault, identity, isSubjectType } from './utils';\nimport { LinkedItem, linkedItem, unlinkItem, cloneLinkedItem } from './structures/LinkedItem';\n\nexport interface RuleIndexOptions<A extends Abilities, C> extends Partial<RuleOptions<C>> {\n  detectSubjectType?(\n    subject: Exclude<Normalize<A>[1], SubjectType>\n  ): ExtractSubjectType<Normalize<A>[1]>;\n  anyAction?: string;\n  anySubjectType?: string;\n}\n\ndeclare const $abilities: unique symbol;\ndeclare const $conditions: unique symbol;\ninterface WithGenerics {\n  [$abilities]: any\n  [$conditions]: any\n}\nexport type Public<T extends WithGenerics> = { [K in keyof T]: T[K] };\nexport interface Generics<T extends WithGenerics> {\n  abilities: T[typeof $abilities],\n  conditions: T[typeof $conditions]\n}\n\nexport type RuleOf<T extends WithGenerics> =\n  Rule<Generics<T>['abilities'], Generics<T>['conditions']>;\nexport type RawRuleOf<T extends WithGenerics> =\n  RawRuleFrom<Generics<T>['abilities'], Generics<T>['conditions']>;\n\nexport type RuleIndexOptionsOf<T extends WithGenerics> =\n  RuleIndexOptions<Generics<T>['abilities'], Generics<T>['conditions']>;\n\ninterface AbilityEvent<T extends WithGenerics> {\n  target: T\n  /** @deprecated use \"target\" property instead */\n  ability: T\n}\n\nexport interface UpdateEvent<T extends WithGenerics> extends AbilityEvent<T> {\n  rules: RawRuleOf<T>[]\n}\n/**\n * @deprecated `on`/`emit` properly infer type without this type\n * TODO(major): delete\n */\nexport type EventHandler<Event> = (event: Event) => void;\n\nexport type Events<\n  T extends WithGenerics,\n  K extends keyof EventsMap<T> = keyof EventsMap<T>\n> = Map<K, LinkedItem<EventsMap<T>[K]> | null>;\n\ninterface EventsMap<T extends WithGenerics> {\n  update(event: UpdateEvent<T>): void\n  updated(event: UpdateEvent<T>): void\n}\n\ntype IndexTree<A extends Abilities, C> = Map<SubjectType, Map<string, {\n  rules: Rule<A, C>[],\n  merged: boolean\n}>>;\n\nexport type Unsubscribe = () => void;\n\nconst defaultActionEntry = () => ({\n  rules: [] as unknown as Rule<any, any>[],\n  merged: false\n});\nconst defaultSubjectEntry = () => new Map<string, ReturnType<typeof defaultActionEntry>>();\nconst analyze = (index: any, rule: Rule<any, any>) => {\n  if (!index._hasPerFieldRules && rule.fields) {\n    index._hasPerFieldRules = true;\n  }\n};\n\ntype AbilitySubjectTypeParameters<T extends Abilities, IncludeField extends boolean = true> =\n  AbilityParameters<\n  T,\n  T extends AbilityTuple\n    ? IncludeField extends true\n      ? (action: T[0], subject: ExtractSubjectType<T[1]>, field?: string) => 0\n      : (action: T[0], subject: ExtractSubjectType<T[1]>) => 0\n    : never,\n  (action: Extract<T, string>) => 0\n  >;\n\nexport class RuleIndex<A extends Abilities, Conditions> {\n  private _hasPerFieldRules: boolean = false;\n  private _events: Events<this> = new Map();\n  private _indexedRules!: IndexTree<A, Conditions>;\n  private _rules!: RawRuleFrom<A, Conditions>[];\n  private readonly _ruleOptions!: RuleOptions<Conditions>;\n  private readonly _detectSubjectType!: Required<RuleIndexOptions<A, Conditions>>['detectSubjectType'];\n  private readonly _anyAction: string;\n  private readonly _anySubjectType: string;\n  readonly [$abilities]!: A;\n  readonly [$conditions]!: Conditions;\n\n  constructor(\n    rules: RawRuleFrom<A, Conditions>[] = [],\n    options: RuleIndexOptions<A, Conditions> = {}\n  ) {\n    this._ruleOptions = {\n      conditionsMatcher: options.conditionsMatcher,\n      fieldMatcher: options.fieldMatcher,\n      resolveAction: options.resolveAction || identity,\n    };\n    this._anyAction = options.anyAction || 'manage';\n    this._anySubjectType = options.anySubjectType || 'all';\n    this._detectSubjectType = options.detectSubjectType || detectSubjectType;\n    this._rules = rules;\n    this._indexedRules = this._buildIndexFor(rules);\n  }\n\n  get rules() {\n    return this._rules;\n  }\n\n  detectSubjectType(object?: Normalize<A>[1]): ExtractSubjectType<Normalize<A>[1]> {\n    if (isSubjectType(object)) return object;\n    if (!object) return this._anySubjectType;\n    return this._detectSubjectType(object as Exclude<Normalize<A>[1], SubjectType>);\n  }\n\n  update(rules: RawRuleFrom<A, Conditions>[]): Public<this> {\n    const event = {\n      rules,\n      ability: this,\n      target: this\n    } as unknown as UpdateEvent<this>;\n\n    this._emit('update', event);\n    this._rules = rules;\n    this._indexedRules = this._buildIndexFor(rules);\n    this._emit('updated', event);\n\n    return this;\n  }\n\n  private _buildIndexFor(rawRules: RawRuleFrom<A, Conditions>[]) {\n    const indexedRules: IndexTree<A, Conditions> = new Map();\n\n    for (let i = rawRules.length - 1; i >= 0; i--) {\n      const priority = rawRules.length - i - 1;\n      const rule = new Rule(rawRules[i], this._ruleOptions, priority);\n      const actions = wrapArray(rule.action);\n      const subjects = wrapArray(rule.subject || this._anySubjectType);\n      analyze(this, rule);\n\n      for (let k = 0; k < subjects.length; k++) {\n        const subjectRules = getOrDefault(indexedRules, subjects[k], defaultSubjectEntry);\n\n        for (let j = 0; j < actions.length; j++) {\n          getOrDefault(subjectRules, actions[j], defaultActionEntry).rules.push(rule);\n        }\n      }\n    }\n\n    return indexedRules;\n  }\n\n  possibleRulesFor(...args: AbilitySubjectTypeParameters<A, false>): Rule<A, Conditions>[]\n  possibleRulesFor(\n    action: string,\n    subjectType: SubjectType = this._anySubjectType\n  ): Rule<A, Conditions>[] {\n    if (!isSubjectType(subjectType)) {\n      throw new Error('\"possibleRulesFor\" accepts only subject types (i.e., string or class) as the 2nd parameter');\n    }\n\n    const subjectRules = getOrDefault(this._indexedRules, subjectType, defaultSubjectEntry);\n    const actionRules = getOrDefault(subjectRules, action, defaultActionEntry);\n\n    if (actionRules.merged) {\n      return actionRules.rules;\n    }\n\n    const anyActionRules = action !== this._anyAction && subjectRules.has(this._anyAction)\n      ? subjectRules.get(this._anyAction)!.rules\n      : undefined;\n    let rules = mergePrioritized(actionRules.rules, anyActionRules);\n\n    if (subjectType !== this._anySubjectType) {\n      rules = mergePrioritized(rules, (this as any).possibleRulesFor(action, this._anySubjectType));\n    }\n\n    actionRules.rules = rules;\n    actionRules.merged = true;\n\n    return rules;\n  }\n\n  rulesFor(...args: AbilitySubjectTypeParameters<A>): Rule<A, Conditions>[]\n  rulesFor(action: string, subjectType?: SubjectType, field?: string): Rule<A, Conditions>[] {\n    const rules: Rule<A, Conditions>[] = (this as any).possibleRulesFor(action, subjectType);\n\n    if (field && typeof field !== 'string') {\n      throw new Error('The 3rd, `field` parameter is expected to be a string. See https://stalniy.github.io/casl/en/api/casl-ability#can-of-pure-ability for details');\n    }\n\n    if (!this._hasPerFieldRules) {\n      return rules;\n    }\n\n    return rules.filter(rule => rule.matchesField(field));\n  }\n\n  on<T extends keyof EventsMap<this>>(\n    event: T,\n    handler: EventsMap<Public<this>>[T]\n  ): Unsubscribe {\n    const tail = this._events.get(event) || null;\n    const item = linkedItem(handler, tail);\n    this._events.set(event, item);\n\n    return () => {\n      const currentTail = this._events.get(event);\n\n      if (!item.next && !item.prev && currentTail === item) {\n        this._events.delete(event);\n      } else if (item === currentTail) {\n        this._events.set(event, item.prev);\n      }\n\n      unlinkItem(item);\n    };\n  }\n\n  private _emit<T extends keyof EventsMap<this>>(\n    name: T,\n    payload: Parameters<EventsMap<this>[T]>[0]\n  ) {\n    let current = this._events.get(name) || null;\n    while (current !== null) {\n      const prev = current.prev ? cloneLinkedItem(current.prev) : null;\n      current.value(payload);\n      current = prev;\n    }\n  }\n}\n","import { RuleIndex, RuleIndexOptions, RuleIndexOptionsOf, Public, RawRuleOf } from './RuleIndex';\nimport { Abilities, AbilityTuple, CanParameters, Subject } from './types';\nimport { Rule } from './Rule';\n\nexport interface AbilityOptions<A extends Abilities, Conditions>\n  extends RuleIndexOptions<A, Conditions> {}\nexport interface AnyAbility extends Public<PureAbility<any, any>> {}\nexport interface AbilityOptionsOf<T extends AnyAbility> extends RuleIndexOptionsOf<T> {}\nexport type AbilityClass<T extends AnyAbility> = new (\n  rules?: RawRuleOf<T>[],\n  options?: AbilityOptionsOf<T>\n) => T;\n\nexport class PureAbility<\n  A extends Abilities = AbilityTuple,\n  Conditions = unknown\n> extends RuleIndex<A, Conditions> {\n  can(...args: CanParameters<A>): boolean {\n    const rule = this.relevantRuleFor(...args);\n    return !!rule && !rule.inverted;\n  }\n\n  relevantRuleFor(...args: CanParameters<A>): Rule<A, Conditions> | null\n  relevantRuleFor(action: string, subject?: Subject, field?: string): Rule<A, Conditions> | null {\n    const subjectType = this.detectSubjectType(subject);\n    const rules = (this as any).rulesFor(action, subjectType, field);\n\n    for (let i = 0, length = rules.length; i < length; i++) {\n      if (rules[i].matchesConditions(subject)) {\n        return rules[i];\n      }\n    }\n\n    return null;\n  }\n\n  cannot(...args: CanParameters<A>): boolean {\n    return !this.can(...args);\n  }\n}\n","import {\n  $eq,\n  eq,\n  $ne,\n  ne,\n  $lt,\n  lt,\n  $lte,\n  lte,\n  $gt,\n  gt,\n  $gte,\n  gte,\n  $in,\n  within,\n  $nin,\n  nin,\n  $all,\n  all,\n  $size,\n  size,\n  $regex,\n  $options,\n  regex,\n  $elemMatch,\n  elemMatch,\n  $exists,\n  exists,\n  and,\n  createFactory,\n  BuildMongoQuery,\n  DefaultOperators,\n} from '@ucast/mongo2js';\nimport { ConditionsMatcher, AnyObject } from '../types';\nimport { Container, GenericFactory } from '../hkt';\n\nconst defaultInstructions = {\n  $eq,\n  $ne,\n  $lt,\n  $lte,\n  $gt,\n  $gte,\n  $in,\n  $nin,\n  $all,\n  $size,\n  $regex,\n  $options,\n  $elemMatch,\n  $exists,\n};\nconst defaultInterpreters = {\n  eq,\n  ne,\n  lt,\n  lte,\n  gt,\n  gte,\n  in: within,\n  nin,\n  all,\n  size,\n  regex,\n  elemMatch,\n  exists,\n  and,\n};\n\ninterface MongoQueryFactory extends GenericFactory {\n  produce: MongoQuery<this[0]>\n}\n\ntype MergeUnion<T extends {}, Keys extends keyof T = keyof T> = { [K in Keys]: T[K] };\nexport type MongoQuery<T = AnyObject> = BuildMongoQuery<MergeUnion<T>, {\n  toplevel: {},\n  field: Pick<DefaultOperators<MergeUnion<T>>['field'], keyof typeof defaultInstructions>\n}> & Container<MongoQueryFactory>;\n\ntype MongoQueryMatcherFactory =\n  (...args: Partial<Parameters<typeof createFactory>>) => ConditionsMatcher<MongoQuery>;\nexport const buildMongoQueryMatcher = ((instructions, interpreters, options) => createFactory(\n  { ...defaultInstructions, ...instructions },\n  { ...defaultInterpreters, ...interpreters },\n  options\n)) as MongoQueryMatcherFactory;\n\nexport const mongoQueryMatcher = createFactory(defaultInstructions, defaultInterpreters);\nexport type {\n  MongoQueryFieldOperators,\n  MongoQueryTopLevelOperators,\n  MongoQueryOperators,\n} from '@ucast/mongo2js';\n","import { FieldMatcher } from '../types';\n\nconst REGEXP_SPECIAL_CHARS = /[-/\\\\^$+?.()|[\\]{}]/g;\nconst REGEXP_ANY = /\\.?\\*+\\.?/g;\nconst REGEXP_STARS = /\\*+/;\nconst REGEXP_DOT = /\\./g;\n\nfunction detectRegexpPattern(match: string, index: number, string: string): string {\n  const quantifier = string[0] === '*' || match[0] === '.' && match[match.length - 1] === '.'\n    ? '+'\n    : '*';\n  const matcher = match.indexOf('**') === -1 ? '[^.]' : '.';\n  const pattern = match.replace(REGEXP_DOT, '\\\\$&')\n    .replace(REGEXP_STARS, matcher + quantifier);\n\n  return index + match.length === string.length ? `(?:${pattern})?` : pattern;\n}\n\nfunction escapeRegexp(match: string, index: number, string: string): string {\n  if (match === '.' && (string[index - 1] === '*' || string[index + 1] === '*')) {\n    return match;\n  }\n\n  return `\\\\${match}`;\n}\n\nfunction createPattern(fields: string[]) {\n  const patterns = fields.map(field => field\n    .replace(REGEXP_SPECIAL_CHARS, escapeRegexp)\n    .replace(REGEXP_ANY, detectRegexpPattern));\n  const pattern = patterns.length > 1 ? `(?:${patterns.join('|')})` : patterns[0];\n\n  return new RegExp(`^${pattern}$`);\n}\n\nexport const fieldPatternMatcher: FieldMatcher = (fields) => {\n  let pattern: RegExp | null;\n\n  return (field) => {\n    if (typeof pattern === 'undefined') {\n      pattern = fields.every(f => f.indexOf('*') === -1)\n        ? null\n        : createPattern(fields);\n    }\n\n    return pattern === null\n      ? fields.indexOf(field) !== -1\n      : pattern.test(field);\n  };\n};\n","import { PureAbility, AbilityOptions } from './PureAbility';\nimport { RawRuleFrom } from './RawRule';\nimport { AbilityTuple } from './types';\nimport { MongoQuery, mongoQueryMatcher } from './matchers/conditions';\nimport { fieldPatternMatcher } from './matchers/field';\nimport { Public } from './RuleIndex';\n\nexport class Ability<\n  A extends AbilityTuple = AbilityTuple,\n  C extends MongoQuery = MongoQuery\n> extends PureAbility<A, C> {\n  constructor(rules: RawRuleFrom<A, C>[] = [], options: AbilityOptions<A, C> = {}) {\n    super(rules, {\n      conditionsMatcher: mongoQueryMatcher,\n      fieldMatcher: fieldPatternMatcher,\n      ...options,\n    });\n  }\n}\n\nexport interface AnyMongoAbility extends Public<Ability<any, MongoQuery>> {}\n","import { Ability, AnyMongoAbility } from './Ability';\nimport { AnyAbility, AbilityOptionsOf, AbilityClass } from './PureAbility';\nimport { RawRuleOf, Generics } from './RuleIndex';\nimport {\n  ExtractSubjectType as E,\n  AbilityTuple,\n  SubjectType,\n  TaggedInterface,\n  Normalize,\n  AnyObject,\n  AnyClass,\n} from './types';\nimport { ProduceGeneric } from './hkt';\n\nclass RuleBuilder<T extends AnyAbility> {\n  public _rule!: RawRuleOf<T>;\n\n  constructor(rule: RawRuleOf<T>) {\n    this._rule = rule;\n  }\n\n  because(reason: string): this {\n    this._rule.reason = reason;\n    return this;\n  }\n}\n\ntype InstanceOf<T extends AnyAbility, S extends SubjectType> = S extends AnyClass<infer R>\n  ? R\n  : S extends string\n    ? Exclude<Normalize<Generics<T>['abilities']>[1], SubjectType> extends TaggedInterface<string>\n      ? Extract<Normalize<Generics<T>['abilities']>[1], TaggedInterface<S>>\n      : AnyObject\n    : never;\ntype ConditionsOf<T extends AnyAbility, I extends {}> =\n  ProduceGeneric<Generics<T>['conditions'], I>;\ntype ActionFrom<T extends AbilityTuple, S extends SubjectType> = T extends any\n  ? S extends T[1] ? T[0] : never\n  : never;\ntype ActionOf<T extends AnyAbility, S extends SubjectType> = ActionFrom<Generics<T>['abilities'], S>;\ntype SubjectTypeOf<T extends AnyAbility> = E<Normalize<Generics<T>['abilities']>[1]>;\n\ntype SimpleCanParams<T extends AnyAbility> = Parameters<(\n  action: Generics<T>['abilities'] | Generics<T>['abilities'][]\n) => 0>;\ntype BuilderCanParameters<\n  S extends SubjectType,\n  I extends InstanceOf<T, S>,\n  T extends AnyAbility\n> = Generics<T>['abilities'] extends AbilityTuple\n  ? Parameters<(\n    action: ActionOf<T, S> | ActionOf<T, S>[],\n    subject: S | S[],\n    conditions?: ConditionsOf<T, I>\n  ) => 0>\n  : SimpleCanParams<T>;\n\ntype BuilderCanParametersWithFields<\n  S extends SubjectType,\n  I extends InstanceOf<T, S>,\n  F extends string,\n  T extends AnyAbility\n> = Generics<T>['abilities'] extends AbilityTuple\n  ? Parameters<(\n    action: ActionOf<T, S> | ActionOf<T, S>[],\n    subject: S | S[],\n    fields?: F | F[],\n    conditions?: ConditionsOf<T, I>\n  ) => 0>\n  : SimpleCanParams<T>;\ntype Keys<T> = string & keyof T;\n\nexport class AbilityBuilder<T extends AnyAbility> {\n  public rules: RawRuleOf<T>[] = [];\n  private _AbilityType!: AnyClass<T>;\n\n  constructor(AbilityType: AnyClass<T>) {\n    this._AbilityType = AbilityType;\n    this.can = this.can.bind(this as any);\n    this.cannot = this.cannot.bind(this as any);\n    this.build = this.build.bind(this as any);\n  }\n\n  can<\n    I extends InstanceOf<T, S>,\n    S extends SubjectTypeOf<T> = SubjectTypeOf<T>\n  >(...args: BuilderCanParameters<S, I, T>): RuleBuilder<T>\n  can<\n    I extends InstanceOf<T, S>,\n    F extends string = Keys<I>,\n    S extends SubjectTypeOf<T> = SubjectTypeOf<T>\n  >(...args: BuilderCanParametersWithFields<S, I, F | Keys<I>, T>): RuleBuilder<T>\n  can(\n    action: string | string[],\n    subject?: SubjectType | SubjectType[],\n    conditionsOrFields?: string | string[] | Generics<T>['conditions'],\n    conditions?: Generics<T>['conditions']\n  ): RuleBuilder<T> {\n    const rule = { action } as RawRuleOf<T>;\n\n    if (subject) {\n      rule.subject = subject;\n\n      if (Array.isArray(conditionsOrFields) || typeof conditionsOrFields === 'string') {\n        rule.fields = conditionsOrFields;\n      } else if (typeof conditionsOrFields !== 'undefined') {\n        rule.conditions = conditionsOrFields;\n      }\n\n      if (typeof conditions !== 'undefined') {\n        rule.conditions = conditions;\n      }\n    }\n\n    this.rules.push(rule);\n\n    return new RuleBuilder(rule);\n  }\n\n  cannot<\n    I extends InstanceOf<T, S>,\n    S extends SubjectTypeOf<T> = SubjectTypeOf<T>\n  >(...args: BuilderCanParameters<S, I, T>): RuleBuilder<T>\n  cannot<\n    I extends InstanceOf<T, S>,\n    F extends string = Keys<I>,\n    S extends SubjectTypeOf<T> = SubjectTypeOf<T>\n  >(...args: BuilderCanParametersWithFields<S, I, F | Keys<I>, T>): RuleBuilder<T>\n  cannot(\n    action: string | string[],\n    subject?: SubjectType | SubjectType[],\n    conditionsOrFields?: string | string[] | Generics<T>['conditions'],\n    conditions?: Generics<T>['conditions'],\n  ): RuleBuilder<T> {\n    const builder = (this as any).can(action, subject, conditionsOrFields, conditions);\n    builder._rule.inverted = true;\n    return builder;\n  }\n\n  build(options?: AbilityOptionsOf<T>) {\n    return new this._AbilityType(this.rules, options);\n  }\n}\n\ntype DSL<T extends AnyAbility, R> = (\n  can: AbilityBuilder<T>['can'],\n  cannot: AbilityBuilder<T>['cannot']\n) => R;\n\nexport function defineAbility<\n  T extends AnyMongoAbility\n>(define: DSL<T, Promise<void>>, options?: AbilityOptionsOf<T>): Promise<T>;\nexport function defineAbility<\n  T extends AnyMongoAbility\n>(define: DSL<T, void>, options?: AbilityOptionsOf<T>): T;\nexport function defineAbility<\n  T extends AnyMongoAbility\n>(define: DSL<T, void | Promise<void>>, options?: AbilityOptionsOf<T>): T | Promise<T> {\n  const builder = new AbilityBuilder(Ability as unknown as AbilityClass<T>);\n  const result = define(builder.can, builder.cannot);\n\n  if (result && typeof result.then === 'function') {\n    return result.then(() => builder.build(options));\n  }\n\n  return builder.build(options);\n}\n","import { AnyAbility } from './PureAbility';\nimport { Normalize } from './types';\nimport { Generics } from './RuleIndex';\nimport { getSubjectTypeName } from './utils';\n\nexport type GetErrorMessage = (error: ForbiddenError<AnyAbility>) => string;\nexport const getDefaultErrorMessage: GetErrorMessage = error => `Cannot execute \"${error.action}\" on \"${error.subjectType}\"`;\n\nconst NativeError = function NError(this: Error, message: string) {\n  this.message = message;\n} as unknown as new (message: string) => Error;\n\nNativeError.prototype = Object.create(Error.prototype);\n\nexport class ForbiddenError<T extends AnyAbility> extends NativeError {\n  public readonly ability!: T;\n  public action!: Normalize<Generics<T>['abilities']>[0];\n  public subject!: Generics<T>['abilities'][1];\n  public field?: string;\n  public subjectType!: string;\n\n  static _defaultErrorMessage = getDefaultErrorMessage;\n\n  static setDefaultMessage(messageOrFn: string | GetErrorMessage) {\n    this._defaultErrorMessage = typeof messageOrFn === 'string' ? () => messageOrFn : messageOrFn;\n  }\n\n  static from<U extends AnyAbility>(ability: U) {\n    return new this<U>(ability);\n  }\n\n  private constructor(ability: T) {\n    super('');\n    this.ability = ability;\n\n    if (typeof Error.captureStackTrace === 'function') {\n      this.name = 'ForbiddenError';\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n  setMessage(message: string) {\n    this.message = message;\n    return this;\n  }\n\n  throwUnlessCan(...args: Parameters<T['can']>) {\n    const rule = this.ability.relevantRuleFor(...args);\n\n    if (rule && !rule.inverted) {\n      return;\n    }\n\n    this.action = args[0];\n    this.subject = args[1];\n    this.subjectType = getSubjectTypeName(this.ability.detectSubjectType(args[1]));\n    this.field = args[2];\n\n    const reason = rule ? rule.reason : '';\n    // eslint-disable-next-line no-underscore-dangle\n    this.message = this.message || reason || (this.constructor as any)._defaultErrorMessage(this);\n    throw this; // eslint-disable-line\n  }\n}\n"],"names":["wrapArray","value","Array","isArray","TYPE_FIELD","setSubjectType","type","object","hasOwnProperty","Object","defineProperty","Error","isSubjectType","getSubjectClassName","modelName","name","getSubjectTypeName","detectSubjectType","subject","constructor","expandActions","aliasMap","rawActions","merge","actions","i","length","action","findDuplicate","actionToFind","indexOf","defaultAliasMerge","concat","validateForCycles","reservedAction","keys","mergeAliasesAndDetectCycles","duplicate","join","isUsingReservedAction","createAliasResolver","options","skipValidate","anyAction","copyArrayTo","dest","target","start","push","mergePrioritized","array","anotherArray","j","merged","priority","getOrDefault","map","key","defaultValue","get","set","identity","x","validate","rule","fields","fieldMatcher","conditions","conditionsMatcher","Rule","resolveAction","inverted","reason","undefined","_options","_conditionsMatcher","_matchConditions","ast","matches","matchesConditions","matchesField","field","_matchField","linkedItem","prev","item","next","unlinkItem","cloneLinkedItem","defaultActionEntry","rules","defaultSubjectEntry","Map","analyze","index","_hasPerFieldRules","RuleIndex","_events","_ruleOptions","_anyAction","_anySubjectType","anySubjectType","_detectSubjectType","_rules","_indexedRules","_buildIndexFor","update","event","ability","_emit","rawRules","indexedRules","subjects","k","subjectRules","possibleRulesFor","subjectType","actionRules","anyActionRules","has","rulesFor","filter","on","handler","tail","currentTail","delete","payload","current","PureAbility","can","args","relevantRuleFor","cannot","defaultInstructions","$eq","$ne","$lt","$lte","$gt","$gte","$in","$nin","$all","$size","$regex","$options","$elemMatch","$exists","defaultInterpreters","eq","ne","lt","lte","gt","gte","in","within","nin","all","size","regex","elemMatch","exists","and","buildMongoQueryMatcher","instructions","interpreters","createFactory","mongoQueryMatcher","REGEXP_SPECIAL_CHARS","REGEXP_ANY","REGEXP_STARS","REGEXP_DOT","detectRegexpPattern","match","string","quantifier","matcher","pattern","replace","escapeRegexp","createPattern","patterns","RegExp","fieldPatternMatcher","every","f","test","Ability","RuleBuilder","_rule","because","AbilityBuilder","AbilityType","_AbilityType","bind","build","conditionsOrFields","builder","defineAbility","define","result","then","getDefaultErrorMessage","error","NativeError","NError","message","prototype","create","ForbiddenError","setDefaultMessage","messageOrFn","_defaultErrorMessage","from","captureStackTrace","setMessage","throwUnlessCan"],"mappings":"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"}